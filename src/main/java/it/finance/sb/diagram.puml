@startuml
class it.finance.sb.factory.TransactionFactory {
+ {static} AbstractTransaction createTransaction(TransactionType,double,String,Date,AbstractAccount,AbstractAccount)
}

class it.finance.sb.service.TransactionServiceTest {
- TransactionService transactionService
- AccountService accountService
- User user
- AbstractAccount acc1
- AbstractAccount acc2
~ void setUp()
~ void testCreateIncomeTransaction()
~ void testCreateExpenseTransaction()
~ void testCreateMovementTransaction()
~ void testCreateInvalidAmount()
~ void testCreateExpenseWithInsufficientFunds()
~ void testDeleteIncomeTransaction()
~ void testDeleteExpenseTransaction()
~ void testModifyTransaction()
~ void testModifyWithInsufficientFunds()
}


abstract class it.finance.sb.model.ApplicationItem {
- int id
}

interface it.finance.sb.model.composite.CompositeTransaction {
~ void displayTransaction()
~ void getTotal()
}

class it.finance.sb.exception.AccountOperationException {
}
class it.finance.sb.service.AccountServiceTest {
- AccountService accountService
- User user
~ void setUp()
~ void testCreateAccount()
~ void testModifyAccount()
~ void testDeleteAccount()
}


class it.finance.sb.model.transaction.ExpenseTransaction {
- AbstractAccount fromAccount
+ AbstractAccount getFromAccount()
+ void setFromAccount(AbstractAccount)
+ void displayTransaction()
+ void getTotal()
~ void modifyTransaction()
}


interface it.finance.sb.model.iterator.TransactionIterator {
~ boolean hasNext()
~ AbstractTransaction next()
}

class it.finance.sb.model.transaction.IncomeTransaction {
- AbstractAccount toAccount
+ AbstractAccount getToAccount()
+ void setToAccount(AbstractAccount)
+ void displayTransaction()
+ void getTotal()
~ void modifyTransaction()
}


enum it.finance.sb.model.account.AccounType {
+  BANK
+  INVESTMENTS
+  CASH
}

class it.finance.sb.model.composite.TransactionList {
- List<CompositeTransaction> transactionList
+ void displayTransaction()
+ void getTotal()
+ void addTransaction(AbstractTransaction)
+ void addTransactions(List<AbstractTransaction>)
+ void remove(AbstractTransaction)
+ TransactionIterator iterator()
+ boolean modifyTransactionById(int,Consumer<AbstractTransaction>)
}


class it.finance.sb.main {
+ {static} void main(String[])
}

interface it.finance.sb.service.InterfaceService {
}
enum it.finance.sb.model.user.Gender {
+  MALE
+  FEMALE
+  OTHER
}

class it.finance.sb.exception.TransactionOperationException {
}
abstract class it.finance.sb.model.account.AbstractAccount {
# int accountId
- {static} int idCounter
# String name
# double balance
~ {abstract}void seeDeposit()
+ String getName()
+ void setName(String)
+ double getBalance()
+ void setDeposit(double)
+ void update(double)
+ int getAccountId()
}


class it.finance.sb.model.user.User {
- String name
- int age
- Gender gender
- Map<TransactionType,TransactionList> transactionsMap
- List<AbstractAccount> accountList
- void createTransactionList()
+ String getName()
+ void setName(String)
+ int getAge()
+ void setAge(int)
+ Gender getGender()
+ void setGender(Gender)
+ Map<TransactionType,TransactionList> getTransactionLists()
+ List<AbstractAccount> getAccountList()
+ void setAccountList(List<AbstractAccount>)
+ void addAccount(AbstractAccount)
+ void addTransaction(AbstractTransaction)
+ void updateAccount(AbstractAccount)
+ void getFullBalance()
+ void getFullTransaction()
}


class it.finance.sb.service.TransactionService {
- User user
+ AbstractTransaction create(TransactionType,double,String,Date,AbstractAccount,AbstractAccount)
+ AbstractTransaction delete(AbstractTransaction)
+ AbstractTransaction modify(AbstractTransaction,double,String,Date,AbstractAccount,AbstractAccount)
}


class it.finance.sb.model.account.BankAccount {
- double interestRate
~ void seeDeposit()
+ double getInterestRate()
+ void setInterestRate(double)
}


class it.finance.sb.service.AccountService {
- User user
+ AbstractAccount create(AccounType,String,double)
+ AbstractAccount delete(AbstractAccount)
+ AbstractAccount modify(int,String,Double)
}


class it.finance.sb.service.UserService {
+ User create(String,int,Gender)
+ User delete()
+ User modify()
}

enum it.finance.sb.model.transaction.TransactionType {
+  INCOME
+  EXPENSE
+  MOVEMENT
}

class it.finance.sb.model.iterator.ConcreteTransactionIterator {
- List<CompositeTransaction> transactions
- int position
+ boolean hasNext()
+ AbstractTransaction next()
}


class it.finance.sb.model.account.CashAccount {
~ void seeDeposit()
}

class it.finance.sb.model.account.InvestementAccount {
~ void seeDeposit()
}

class it.finance.sb.factory.AccountFactory {
+ {static} AbstractAccount createAccount(AccounType,String,double)
}

class it.finance.sb.model.transaction.MovementTransaction {
- AbstractAccount toAccount
- AbstractAccount fromAccount
+ AbstractAccount getToAccount()
+ void setToAccount(AbstractAccount)
+ AbstractAccount getFromAccount()
+ void setFromAccount(AbstractAccount)
+ void displayTransaction()
+ void getTotal()
~ void modifyTransaction()
}


abstract class it.finance.sb.model.transaction.AbstractTransaction {
# int transactionId
- {static} int idCounter
# double amount
# String reason
# Date date
# TransactionType type
~ {abstract}void modifyTransaction()
+ double getAmount()
+ void setAmount(double)
+ String getReason()
+ void setReason(String)
+ Date getDate()
+ void setDate(Date)
+ TransactionType getType()
+ void setType(TransactionType)
+ int getTransactionId()
}




it.finance.sb.exception.RuntimeException <|-- it.finance.sb.exception.AccountOperationException
it.finance.sb.model.transaction.AbstractTransaction <|-- it.finance.sb.model.transaction.ExpenseTransaction
it.finance.sb.model.transaction.AbstractTransaction <|-- it.finance.sb.model.transaction.IncomeTransaction
it.finance.sb.model.composite.CompositeTransaction <|.. it.finance.sb.model.composite.TransactionList
it.finance.sb.exception.RuntimeException <|-- it.finance.sb.exception.TransactionOperationException
it.finance.sb.service.InterfaceService <|.. it.finance.sb.service.TransactionService
it.finance.sb.model.account.AbstractAccount <|-- it.finance.sb.model.account.BankAccount
it.finance.sb.service.InterfaceService <|.. it.finance.sb.service.AccountService
it.finance.sb.service.InterfaceService <|.. it.finance.sb.service.UserService
it.finance.sb.model.iterator.TransactionIterator <|.. it.finance.sb.model.iterator.ConcreteTransactionIterator
it.finance.sb.model.account.AbstractAccount <|-- it.finance.sb.model.account.CashAccount
it.finance.sb.model.account.AbstractAccount <|-- it.finance.sb.model.account.InvestementAccount
it.finance.sb.model.transaction.AbstractTransaction <|-- it.finance.sb.model.transaction.MovementTransaction
it.finance.sb.model.composite.CompositeTransaction <|.. it.finance.sb.model.transaction.AbstractTransaction
@enduml